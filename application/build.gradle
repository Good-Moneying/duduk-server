plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java-test-fixtures'
}

bootJar.enabled = false
jar.enabled = true

dependencies {
    implementation(project(":domain"))
    implementation(project(":core"))
    implementation project(':common')


    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'org.json:json:20210307'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.2')
            { exclude group: 'org.json', module: 'json'}
    implementation 'com.auth0:java-jwt:4.4.0'

    // MySQL
    runtimeOnly 'com.h2database:h2'

    // H2 Database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
}

def querydslSrcDir = 'src/main/generated'

sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
    delete file(querydslSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}